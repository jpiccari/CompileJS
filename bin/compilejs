#!/usr/bin/env node
/*
 * Copyright (c) 2014 Joshua Piccari, All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*jshint node:true */

'use strict';

var fs = require('fs'),
	path = require('path'),
	StreamQueue = require('streamqueue'),
	compile = require('../lib/compile'),
	input = process.stdin,
	argv = require('yargs')
		.usage('usage: $0 [--output file] [file ...]')
		.help('help', 'Display usage information')
		.alias('h', 'help')
		.string('_')
		.alias('o', 'output')
		.describe('o', 'Specify output file')
		.string('o')
		.count('verbose')
		.alias('v', 'verbose')
		.describe('v', 'D\'em debug statements')
		.argv;


/* Read input form files and queue them up or parsing. */
if(argv._.length) {
	input = new StreamQueue();

	argv._.forEach(function(file) {
		if(!fs.statSync(file).isFile()) {
			console.error('error: ' + path.resolve(file) + ' does not exist or is not readable.');
			process.exit(1);
		}

		input.queue(fs.createReadStream(file));
	});

	input.done();
}


input
	.pipe(compile())
	.pipe(argv.output ? fs.createWriteStream(argv.output) : process.stdout);