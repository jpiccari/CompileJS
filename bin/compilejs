#!/usr/bin/env node
/*
 * Copyright (c) 2014 Joshua Piccari, All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

'use strict';

var fs = require('fs'),
	path = require('path'),
	Lexer = require('../lib/lexer');


function printToken(token) {
	var output = [];
	if(token.type) {
		output.push(token.type);
		if(token.value) {
			output.push(token.value);
		}
	}
	else {
		output.push('"' + token + '"');
	}
	console.log('Token ( ' + output.join(', ') + ' )');
}

function processSource(text) {
	var l = new Lexer(text),
		token;
	while((token = l.nextToken())) {
		printToken(token);
		if(token.toString() === 'eof') {
			break;
		}
	}
}


if(process.argv[2] !== '-l') {
	console.error('usage: ' + path.basename(process.argv[1]) + ' -l file ...');
	process.exit(1);
}


/* Run lexer on the rest of the arguments */
process.argv.splice(3).forEach(function(file) {
	fs.stat(file, function(err, stats) {
		if(!err && stats.isFile()) {
			fs.readFile(file, function(error, content) {
				processSource(content.toString());
			});
		}
		else {
			console.error('error: ' + path.resolve(file) + ' does not exist or is not a file.');
		}
	});
});
